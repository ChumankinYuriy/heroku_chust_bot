import asyncio
import logging
import os
import random
from asyncio import sleep
from queue import SimpleQueue

from aiogram import Bot, types, md
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.executor import start_webhook
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from core import core
from keyboards import style_kb, init_main_keyboard
from utils import ImageTypes, clear_catalog, EXAMPLES_DIR, EXAMPLES_URL, EXAMPLES_ZIP, Statistics, read_examples
from utils import BotStates, parse_style_id, default_styles, download_file, \
    PRETRAINED_FILENAME, PRETRAINED_URL, CommandText, DataKeys
import zipfile

# –¢–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É.
TOKEN = os.environ['TOKEN'] if 'TOKEN' in os.environ else None
# –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.
FEEDBACK_CHAT_ID = os.environ['FEEDBACK_CHAT_ID'] if 'FEEDBACK_CHAT_ID' in os.environ else None
# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π url –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
WEBHOOK_PATH = '/webhook/'
# –§–∏–ª—å—Ç—Ä —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã.
WEBAPP_HOST = '0.0.0.0'
# –ü–æ—Ä—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã.
WEBAPP_PORT = os.environ.get('PORT')
# WEBHOOK_HOST –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.
# –Ω–∞–ø—Ä–∏–º–µ—Ä: 'https://deploy-chust-bot.herokuapp.com'
WEBHOOK_HOST = os.environ['WEBHOOK_HOST'] if 'WEBHOOK_HOST' in os.environ else None
# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π url –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
# –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ, –º–∏–Ω.
WAITING_TIME = int(os.environ['WAITING_TIME']) if 'WAITING_TIME' in os.environ else 5

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.DEBUG)

# –û—á–µ—Ä–µ–¥—å –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á.
task_queue = SimpleQueue()
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
on_processing = [0]
# –ù–∞–±–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.
examples = [{}]


async def task_queue_processing():
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á."""
    while True:
        if not task_queue.empty():
            logging.debug('Starting processing task.')
            on_processing[0] = task_queue.qsize()
            future, task = task_queue.get()
            future.set_result(await task)
            logging.debug('Processing task was completed.')
            Statistics.process_request()
        else:
            on_processing[0] = 0
        await sleep(1)


# –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–æ—Ç–∞.
help_str = '–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –¥–µ–º–æ–Ω—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –±–æ—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è.\n' + \
           '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è ' \
           '–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.'


async def run_processing(message: types.Message, user_data: dict):
    if DataKeys.CONTENT_FILE_ID not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                             reply_markup=init_main_keyboard(user_data))
        return
    if DataKeys.STYLE_FILE_ID not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å.",
                             reply_markup=init_main_keyboard(user_data))
        return
    await BotStates.PROCESSING.set()
    content_file = await bot.get_file(user_data[DataKeys.CONTENT_FILE_ID])
    content_filename = 'tmp/' + user_data[DataKeys.CONTENT_FILE_ID] + '.png'
    await content_file.download(content_filename)
    style_filename = None
    if user_data[DataKeys.STYLE_FILE_ID] in default_styles:
        style_filename = default_styles[user_data[DataKeys.STYLE_FILE_ID]]['file']
    else:
        style_file = await bot.get_file(user_data[DataKeys.STYLE_FILE_ID])
        style_filename = 'tmp/' + user_data[DataKeys.STYLE_FILE_ID] + '.png'
        await style_file.download(style_filename)
    time_str = ''
    waiting_time = WAITING_TIME * (on_processing[0] + 1)
    if waiting_time == 0:
        time_str = '–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã'
    elif waiting_time % 10 == 1:
        time_str = '–æ–∫–æ–ª–æ ' + str(waiting_time) + ' –º–∏–Ω—É—Ç—ã'
    else:
        time_str = '–æ–∫–æ–ª–æ ' + str(waiting_time) + ' –º–∏–Ω—É—Ç'
    info = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ, —ç—Ç–æ –∑–∞–π–º—ë—Ç ' + time_str + '. –ü—Ä–∏—à–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.'
    await message.answer(info, reply_markup=init_main_keyboard(user_data))
    loop = asyncio.get_running_loop()
    future = loop.create_future()
    task = core(content_filename, style_filename, PRETRAINED_FILENAME)
    task_queue.put((future,task))
    result_filename = await future
    os.remove(content_filename)
    if user_data[DataKeys.STYLE_FILE_ID] not in default_styles:
        os.remove(style_filename)
    await types.ChatActions.upload_photo()
    user_data[DataKeys.ON_PROCESSING] = False
    await message.answer_photo(open(result_filename, 'rb'),
                               '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üôÇ',
                               reply_markup=init_main_keyboard(user_data))
    await BotStates.WAIT_FEEDBACK.set()
    os.remove(result_filename)


@dp.message_handler(regexp=CommandText.SHOW_STYLES, state='*')
async def show_styles_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await types.ChatActions.upload_photo()
    media = types.MediaGroup()
    counter = 0
    for style_id, style in default_styles.items():
        # 9 –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∫—Ä–∞—Å–∏–≤–æ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –∫–≤–∞–¥—Ä–∞—Ç.
        if counter == 9:
            await message.answer_media_group(media)
            media = types.MediaGroup()
            counter = 0
        media.attach_photo(types.InputFile(style['file']), caption=style['name'])
        counter += 1
    await message.answer_media_group(media)
    await message.answer(
        '–≠—Ç–æ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç–∏–ª–µ–π. '
        '–ü–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∏–ª—è –ª—é–±–æ–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ.',
        reply_markup=init_main_keyboard(user_data))


@dp.message_handler(regexp=CommandText.SHOW_RANDOM_EXAMPLE, state='*')
async def show_example_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if len(examples[0]) == 0:
        await message.answer(
            '–ò–∑–≤–∏–Ω—è—é—Å—å, –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.',
            reply_markup=init_main_keyboard(user_data))
    else:
        example = random.choice(list(examples[0].values()))
        await types.ChatActions.upload_photo()
        media = types.MediaGroup()
        media.attach_photo(types.InputFile(example[ImageTypes.RESULT]), caption='–†–µ–∑—É–ª—å—Ç–∞—Ç')
        media.attach_photo(types.InputFile(example[ImageTypes.CONTENT]), caption='–§–æ—Ç–æ')
        media.attach_photo(types.InputFile(example[ImageTypes.STYLE]), caption='–°—Ç–∏–ª—å')
        await message.answer_media_group(media)
        await message.answer(
            '–í–æ—Ç —Ç–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä.',
            reply_markup=init_main_keyboard(user_data))


@dp.message_handler(regexp=CommandText.README, state='*')
async def readme_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await message.answer('–Ø –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, '
                         '—á—Ç–æ–±—ã —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ–Ω–æ —Å—Ç–∞–ª–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∏–ª—å).',
                         reply_markup=ReplyKeyboardRemove())
    await types.ChatActions.upload_photo()
    flower_id = 4
    if flower_id in examples[0]:
        media = types.MediaGroup()
        media.attach_photo(types.InputFile(examples[0][flower_id][ImageTypes.CONTENT]),
                           caption='–ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç—ã.')

        media.attach_photo(types.InputFile(examples[0][flower_id][ImageTypes.STYLE]),
                           caption='–ê –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∏–ª—è –∞–∫–≤–∞—Ä–µ–ª—å–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫ —Ü–≤–µ—Ç–æ–≤.')
        media.attach_photo(types.InputFile(examples[0][flower_id][ImageTypes.RESULT]),
                           caption='–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∞—Ç—Å—è —Ü–≤–µ—Ç—ã —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ, '
                                   '–Ω–æ –∫–∞–∫ –±—É–¥-—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–≤–∞—Ä–µ–ª—å—é.')
        await message.answer_media_group(media)
    await message.answer('–û–±—ã—á–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç '
                         '–ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ø–æ—Ö–æ–∂–∏–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ, –Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º –∏–Ω–∞—á–µ, '
                         '–ª–∏–±–æ –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–∫—Å—Ç—É—Ä—É.\n\n'
                         '–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ '
                         f'{md.hlink("github", "https://github.com/ChumankinYuriy/heroku_chust_bot")}.',
                         reply_markup=init_main_keyboard(user_data), disable_web_page_preview=True,
                         parse_mode=types.ParseMode.HTML)


@dp.message_handler(content_types=[types.ContentType.ANY], state=BotStates.PROCESSING)
async def processing(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ —è –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ.')


@dp.message_handler(commands='start', state='*')
async def start_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await BotStates.DEFAULT.set()
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n' + help_str,
        parse_mode=types.ParseMode.HTML,
        disable_web_page_preview=True,
        reply_markup=init_main_keyboard(user_data)
    )


@dp.message_handler(commands='help', state='*')
async def help_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await BotStates.DEFAULT.set()
    await message.answer(
        help_str,
        parse_mode=types.ParseMode.HTML,
        disable_web_page_preview=True,
        reply_markup=init_main_keyboard(user_data)
    )


@dp.message_handler(commands='statistics', state='*')
async def statistics_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await BotStates.DEFAULT.set()
    stat = Statistics.get()
    info = '–ù–∞—á–∏–Ω–∞—è —Å ' + stat['date'] + ' —è –æ–±—Ä–∞–±–æ—Ç–∞–ª ' + str(stat['counter'])
    mod = stat['counter'] % 10
    if mod == 1:
        info += ' –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
    elif mod in [2, 3, 4]:
        info += ' –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
    else:
        info += ' –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.'
    info += '\n–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –¥–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–≤–Ω–∞ ' + str(on_processing[0]) + '.'
    await message.answer(
        info,
        reply_markup=init_main_keyboard(user_data)
    )


@dp.message_handler(regexp=CommandText.SET_CONTENT + "|" + CommandText.SET_ANOTHER_CONTENT, state='*')
async def set_content_handler(message: types.Message, state: FSMContext):
    await BotStates.WAIT_CONTENT.set()
    await message.answer('–ö —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.',
                         reply_markup=None)


@dp.message_handler(content_types=[types.ContentType.PHOTO], state=BotStates.WAIT_CONTENT)
async def content_photo_handler(message: types.Message, state: FSMContext):
    file = await bot.get_file(message.photo[-1].file_id)
    await state.update_data(content_file_id=file.file_id)
    await BotStates.DEFAULT.set()
    user_data = await state.get_data()
    answer = '–ó–∞–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n–í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ.'
    await message.answer(answer, reply_markup=init_main_keyboard(user_data))


@dp.message_handler(regexp=CommandText.DO_TRANSFER, state='*')
async def set_content_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if DataKeys.CONTENT_FILE_ID not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                             reply_markup=init_main_keyboard(user_data))
        return
    await BotStates.WAIT_STYLE.set()
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö.',
        reply_markup=style_kb)


async def set_style_reply(chat_id: int, user_data: dict, answer: str):
    if DataKeys.CONTENT_FILE_ID not in user_data:
        answer += "–ó–∞–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    await bot.send_message(chat_id, answer, reply_markup=init_main_keyboard(user_data))


@dp.message_handler(state=BotStates.WAIT_STYLE)
@dp.async_task
async def set_style(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if message.text == CommandText.MY_STYLE:
        await message.answer(
            '–ö —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∏–ª—è.',
            reply_markup=ReplyKeyboardRemove())
        return

    style_id = parse_style_id(message.text)
    if style_id is None:
        await message.answer(
            '–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π —Å—Ç–∏–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å.', reply_markup=init_main_keyboard(user_data))
        return
    await state.update_data(style_file_id=style_id)
    await BotStates.DEFAULT.set()
    await state.update_data(on_processing=True)
    user_data = await state.get_data()
    answer = '–ó–∞–¥–∞–Ω —Å—Ç–∏–ª—å \'' + default_styles[style_id]['name'] + '\'.\n'
    await set_style_reply(message.from_user.id, user_data, answer)
    await run_processing(message, user_data)
    await state.update_data(on_processing=False)


@dp.message_handler(content_types=[types.ContentType.PHOTO], state=BotStates.WAIT_STYLE)
@dp.async_task
async def style_photo_handler(message: types.Message, state: FSMContext):
    file = await bot.get_file(message.photo[-1].file_id)
    await state.update_data(style_file_id=file.file_id)
    await BotStates.DEFAULT.set()
    await state.update_data(on_processing=True)
    user_data = await state.get_data()
    answer = '–ó–∞–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å.\n'
    await set_style_reply(message.from_user.id, user_data, answer)
    await run_processing(message, user_data)
    await state.update_data(on_processing=False)


@dp.message_handler(state=BotStates.WAIT_FEEDBACK)
async def feedback_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await BotStates.DEFAULT.set()
    await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
                           reply_markup=init_main_keyboard(user_data))
    if FEEDBACK_CHAT_ID is not None:
        await bot.send_message(FEEDBACK_CHAT_ID, "#–æ—Ç–∑—ã–≤ –æ—Ç @" + message.from_user.username + ":\n" + message.text)


@dp.message_handler(content_types=[types.ContentType.PHOTO], state='*')
async def random_photo_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–æ –Ω–µ –ø–æ–Ω—è–ª –∑–∞—á–µ–º.',
                           reply_markup=init_main_keyboard(user_data))


@dp.message_handler(content_types=[types.ContentType.ANY], state='*')
async def random_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—ã.",
                         reply_markup=init_main_keyboard(user_data))


def install_examples():
    logging.debug('Trying to download and unzip ' + EXAMPLES_ZIP)
    download_file(EXAMPLES_URL, EXAMPLES_ZIP)
    logging.debug(EXAMPLES_ZIP + ' was downloaded')
    with zipfile.ZipFile(EXAMPLES_ZIP, 'r') as zip_ref:
        zip_ref.extractall(EXAMPLES_DIR)
        logging.debug(EXAMPLES_ZIP + ' was unzipped')
    logging.debug(EXAMPLES_ZIP + ' is OK')


async def on_startup(dp):
    logging.debug('Startup')
    try:
        if not os.path.isfile(PRETRAINED_FILENAME):
            logging.debug('Trying to download ' + PRETRAINED_FILENAME)
            download_file(PRETRAINED_URL, PRETRAINED_FILENAME)
            logging.debug(PRETRAINED_FILENAME + ' was downloaded')
        logging.debug(PRETRAINED_FILENAME + ' is OK')
        if not os.path.exists(EXAMPLES_DIR):
            os.mkdir(EXAMPLES_DIR)
            install_examples()
        elif ('.gitignore' in os.listdir(EXAMPLES_DIR)) and (len(os.listdir(EXAMPLES_DIR)) == 1):
            install_examples()
        logging.debug('Examples are OK')
        logging.debug('Current directory is ' + os.path.abspath(os.getcwd()))
        examples[0] = read_examples()
        logging.debug('Number of examples is ' + str(len(examples[0])))
        clear_catalog('tmp/', lambda path: path != '.gitignore')
    except Exception as ex:
        logging.error('Failed while preloading: ' + str(ex))
    await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown(dp):
    pass


if __name__ == '__main__':
    dp.loop.create_task(task_queue_processing())
    start_webhook(dispatcher=dp, webhook_path=WEBHOOK_PATH,
                  on_startup=on_startup, on_shutdown=on_shutdown,
                  host=WEBAPP_HOST, port=WEBAPP_PORT)
