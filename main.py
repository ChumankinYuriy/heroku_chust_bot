import logging
import os

from aiogram import Bot, types, md
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.types import ReplyKeyboardRemove, User
from aiogram.utils.executor import start_webhook
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from core import core
from keyboards import style_kb, init_main_keyboard, feedback_kb
from utils import BotStates, parse_style_id, parse_image_type, default_styles, get_photo, ImageTypes, download_file, \
    PRETRAINED_FILENAME, PRETRAINED_URL, CommandText, DataKeys

# –¢–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É.
TOKEN = os.environ['TOKEN'] if 'TOKEN' in os.environ else None
# –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.
FEEDBACK_CHAT_ID = os.environ['FEEDBACK_CHAT_ID'] if 'FEEDBACK_CHAT_ID' in os.environ else None
# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π url –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
WEBHOOK_PATH = '/webhook/'
# –§–∏–ª—å—Ç—Ä —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã.
WEBAPP_HOST = '0.0.0.0'
# –ü–æ—Ä—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã.
WEBAPP_PORT = os.environ.get('PORT')
# WEBHOOK_HOST –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.
# –Ω–∞–ø—Ä–∏–º–µ—Ä: 'https://deploy-chust-bot.herokuapp.com'
WEBHOOK_HOST = os.environ['WEBHOOK_HOST'] if 'WEBHOOK_HOST' in os.environ else None
# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π url –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.DEBUG)

# –°—Ç—Ä–æ–∫–∏ —Å–ø—Ä–∞–≤–∫–∏.
help_str = \
        "–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n" + \
        "* '/—Å–ø—Ä–∞–≤–∫–∞' - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏;\n" + \
        "* '/—Ñ–æ—Ç–æ' - –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω —Å—Ç–∏–ª—å;\n" + \
        "* '/—Å—Ç–∏–ª—å' - –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å—Ç–∏–ª—è;\n" + \
        "* '/—Ä–µ–∑—É–ª—å—Ç–∞—Ç' - –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è;" + \
        "* '/–ø–æ–∫–∞–∂–∏' - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å."

help_result_str = "–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π '/—Ä–µ–∑—É–ª—å—Ç–∞—Ç'.\n" +\
                  "–í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–µ–∑–∞–Ω—ã –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö."

help_print_str = "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ, —Å—Ç–∏–ª—å, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç–∏–ª–µ–π\n(–ø—Ä–∏–º–µ—Ä: '/–ø–æ–∫–∞–∂–∏ —Ñ–æ—Ç–æ')\n" + \
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä\n(–ø—Ä–∏–º–µ—Ä: '/–ø–æ–∫–∞–∂–∏ 1')."


async def run_processing(message: types.Message, user_data: dict):
    if DataKeys.CONTENT_FILE_ID not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ.",
                             reply_markup=init_main_keyboard(user_data))
        return
    if DataKeys.STYLE_FILE_ID not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å.",
                             reply_markup=init_main_keyboard(user_data))
        return
    await BotStates.PROCESSING.set()
    content_file = await bot.get_file(user_data[DataKeys.CONTENT_FILE_ID])
    content_filename = 'tmp/' + user_data[DataKeys.CONTENT_FILE_ID] + '.png'
    await content_file.download(content_filename)
    style_filename = None
    if user_data[DataKeys.STYLE_FILE_ID] in default_styles:
        style_filename = default_styles[user_data[DataKeys.STYLE_FILE_ID]]['file']
    else:
        style_file = await bot.get_file(user_data[DataKeys.STYLE_FILE_ID])
        style_filename = 'tmp/' + user_data[DataKeys.STYLE_FILE_ID] + '.png'
        await style_file.download(style_filename)
    await message.answer('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. '
                         + '–ü—Ä–∏—à–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.')
    result_filename = await core(content_filename, style_filename, PRETRAINED_FILENAME)
    os.remove(content_filename)
    if user_data[DataKeys.STYLE_FILE_ID] not in default_styles:
        os.remove(style_filename)
    await message.answer_photo(open(result_filename, 'rb'),
                               '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üôÇ',
                               reply_markup=init_main_keyboard(user_data))
    await BotStates.WAIT_FEEDBACK.set()
    os.remove(result_filename)


@dp.message_handler(content_types=[types.ContentType.ANY], state=BotStates.PROCESSING)
async def processing(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ —è –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')


@dp.message_handler(state=BotStates.WAIT_FEEDBACK)
async def feedback_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await BotStates.DEFAULT.set()
    await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                           reply_markup=init_main_keyboard(user_data))
    if FEEDBACK_CHAT_ID is not None:
        await bot.send_message(FEEDBACK_CHAT_ID, "#–æ—Ç–∑—ã–≤ –æ—Ç @" + message.from_user.username + ":\n" + message.text)


@dp.message_handler(commands='start', state='*')
async def start_handler(message: types.Message, state: FSMContext):
    await BotStates.DEFAULT.set()
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –≠—Ç–æ –¥–µ–º–æ–Ω—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è\n' + help_str +
        f'–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ '
        f'{md.hlink("github", "https://github.com/ChumankinYuriy/heroku_chust_bot")}',
        parse_mode=types.ParseMode.HTML,
        disable_web_page_preview=True)


@dp.message_handler(commands='—Å–ø—Ä–∞–≤–∫–∞', state='*')
async def help_handler(message: types.Message, state: FSMContext):
    await BotStates.DEFAULT.set()
    await message.answer(
        help_str +
        f'–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ '
        f'{md.hlink("github", "https://github.com/ChumankinYuriy/heroku_chust_bot")}',
        parse_mode=types.ParseMode.HTML,
        disable_web_page_preview=True)


@dp.message_handler(commands='–ø–æ–∫–∞–∂–∏', state='*')
async def show_handler(message: types.Message, state: FSMContext):
    text = message.text.replace('/–ø–æ–∫–∞–∂–∏', '')
    user_data = await state.get_data()
    style_id = parse_style_id(text)
    image_type = parse_image_type(text)
    await BotStates.DEFAULT.set()
    if not text:
        await message.answer(help_print_str)
        return
    if (style_id is None) and (image_type is None):
        await message.answer('–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å.')
        return
    photo = None
    caption = None
    if style_id is not None:
        caption = default_styles[style_id]['name']
        photo = get_photo(style_id)
    elif image_type == ImageTypes.STYLE:
        if 'style_file_id' not in user_data:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Å—Ç–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π \'/—Å—Ç–∏–ª—å\'.')
            return
        caption = '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å'
        photo = get_photo(user_data['style_file_id'])
    elif image_type == ImageTypes.CONTENT:
        if 'content_file_id' not in user_data:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π \'/—Ñ–æ—Ç–æ\'.')
            return
        caption = '–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ'
        photo = get_photo(user_data['content_file_id'])
    elif image_type == ImageTypes.RESULT:
        await message.answer('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π \'/—Ä–µ–∑—É–ª—å—Ç–∞—Ç\'.')
        return
    await message.answer_photo(photo, caption=caption)


@dp.message_handler(content_types=[types.ContentType.PHOTO])
async def random_photo_handler(message: types.Message):
    await bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–æ –Ω–µ –ø–æ–Ω—è–ª –∑–∞—á–µ–º.')


async def on_startup(dp):
    if not os.path.isfile(PRETRAINED_FILENAME):
        download_file(PRETRAINED_URL, PRETRAINED_FILENAME)
    await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown(dp):
    pass


@dp.message_handler(regexp=CommandText.SET_CONTENT + "|" + CommandText.SET_ANOTHER_CONTENT, state='*')
async def set_content_handler(message: types.Message, state: FSMContext):
    await BotStates.WAIT_CONTENT.set()
    await message.answer(f'–ö —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∏–ª—å.',
                         reply_markup=None)


@dp.message_handler(content_types=[types.ContentType.PHOTO], state=BotStates.WAIT_CONTENT)
async def content_photo_handler(message: types.Message, state: FSMContext):
    file = await bot.get_file(message.photo[-1].file_id)
    await state.update_data(content_file_id=file.file_id)
    await BotStates.DEFAULT.set()
    user_data = await state.get_data()
    answer = '–ó–∞–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω —Å—Ç–∏–ª—å.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?'
    await message.answer(answer, reply_markup=init_main_keyboard(user_data))


@dp.message_handler(regexp=CommandText.DO_TRANSFER, state='*')
async def set_content_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if DataKeys.CONTENT_FILE_ID not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ.", reply_markup=init_main_keyboard(user_data))
        return
    await BotStates.WAIT_STYLE.set()
    await message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö, '
        f'–ª–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∏–ª—è.',
        reply_markup=style_kb)


async def set_style_reply(chat_id: int, user_data: dict, answer: str):
    if DataKeys.CONTENT_FILE_ID not in user_data:
        answer += "–ó–∞–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω —Å—Ç–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π '/—Ñ–æ—Ç–æ'."
        await bot.send_message(chat_id, answer, reply_markup=init_main_keyboard(user_data))
    else:
        await bot.send_message(chat_id, answer, reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=BotStates.WAIT_STYLE)
@dp.async_task
async def set_style(message: types.Message, state: FSMContext):
    style_id = parse_style_id(message.text)
    if style_id is None:
        await message.answer('–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π —Å—Ç–∏–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å.')
        return
    await state.update_data(style_file_id=style_id)
    await BotStates.DEFAULT.set()
    user_data = await state.get_data()
    answer = '–ó–∞–¥–∞–Ω —Å—Ç–∏–ª—å \'' + default_styles[style_id]['name'] + '\'.\n'
    await set_style_reply(message.from_user.id, user_data, answer)
    await run_processing(message, user_data)


@dp.message_handler(content_types=[types.ContentType.PHOTO], state=BotStates.WAIT_STYLE)
@dp.async_task
async def style_photo_handler(message: types.Message, state: FSMContext):
    file = await bot.get_file(message.photo[-1].file_id)
    await state.update_data(style_file_id=file.file_id)
    await BotStates.DEFAULT.set()
    user_data = await state.get_data()
    answer = '–ó–∞–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å\n'
    await set_style_reply(message.from_user.id, user_data, answer)
    await run_processing(message, user_data)


@dp.message_handler(regexp=CommandText.SHOW_STYLES, state='*')
async def show_styles_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    for style_id, style in default_styles.items():
        caption = style['name']
        photo = get_photo(style_id)
        await message.answer_photo(photo, caption=caption, reply_markup=ReplyKeyboardRemove())
    await message.answer(
        '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?',
        reply_markup=init_main_keyboard(user_data))


@dp.message_handler(content_types=[types.ContentType.ANY], state='*')
async def random_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—ã. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                         reply_markup=init_main_keyboard(user_data))


if __name__ == '__main__':
    start_webhook(dispatcher=dp, webhook_path=WEBHOOK_PATH,
                  on_startup=on_startup, on_shutdown=on_shutdown,
                  host=WEBAPP_HOST, port=WEBAPP_PORT)
